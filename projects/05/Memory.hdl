// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
      And(a = address[14],b = address[13], out = loadkbd);

//    IN  in, sel[2];  00 = ram, 01 = scr, 10 = scr, 11 = kbd
//    OUT a, b, c, d;
      DMux4Way(in = true, sel = address[13..14], a = ram, b = b1, c = c1, d = kbd );
      Or(a = b1, b = c1, out = scr);
       
// IN  in[16], load, address[14];
// OUT out[16];
      And(a = ram, b = load, out = loadram);
      RAM16K(in = in , load = loadram, address = address[0..14], out = outram);

//CHIP Screen {
//    IN  in[16],    // what to write
//    load,          // write-enable bit
//    address[13];   // where to read/write
//   OUT out[16];   // Screen value at the given address

      And(a = scr, b = load, out = loadscr);
 	  Screen(in = in, load = loadscr, address = address[0..13], out = outscr);

//CHIP Keyboard {
//    OUT out[16];
      Keyboard(out = outkbd);
// CHIP Mux16 {
//    IN  a[16], b[16], sel;
//    OUT out[16];

      Mux4Way16(a = outram, b = outscr, c = outscr, d = outkbd, sel = address[13..14], out = out );

}