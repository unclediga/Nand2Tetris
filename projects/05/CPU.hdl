// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
            
      And(a = instruction[3], b = instruction[15], out = writeM);
      And(a = instruction[4], b = instruction[15], out = WD);
      Not(in = instruction[15], out = nbit1);
      Or(a = instruction[5], b = nbit1, out = WA);

      Jmp(ltz = instruction[2], eqz = instruction[1] , gtz = instruction[0] , ng = ngAlu, zr = zrAlu, bit1 = instruction[15], out = WPC );

      Mux16(a = instruction, b = outAlu, sel = instruction[15], out = inA);

      //     IN  in[16], load; OUT out[16];
      ARegister(in = inA, load = WA, out[0..14] = addressM, out = pcIn, out = outA);

      Mux16(a = outA, b = inM, sel = instruction[12], out = inY);

      DRegister(in = outAlu, load = WD, out = inX);


      // CHIP PC {  IN  in[16], load, inc, reset;  OUT out[16];

      PC(in = outA, load = WPC, inc = true, reset = reset, out[0..14] = pc, out[15] = false);
      
     // CHIP ALU {  IN x[16], y[16], zx,nx, zy, ny, f, no;  OUT  out[16], zr, ng;

      ALU(x = inX, y = inY, zx = instruction[11],nx = instruction[10],
                            zy = instruction[9],ny = instruction[8],
                            f = instruction[7], no = instruction[6],
           out = outM, out = outAlu, zr = zrAlu, ng = ngAlu);


      // CHIP Jmp {     IN ltz, eqz, gtz, ng, zr, bit1;     OUT wpc;
     





}